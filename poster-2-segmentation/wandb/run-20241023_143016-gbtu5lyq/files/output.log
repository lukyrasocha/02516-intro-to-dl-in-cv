Traceback (most recent call last):
  File "/zhome/26/8/209207/02516-intro-to-dl-in-cv/poster-2-segmentation/main.py", line 168, in <module>
    train_model(UNetModel, drive_train_loader, drive_val_loader, loss_fn, optimizer, wandb_config=config, num_epochs= MAX_EPOCHS, device=DEVICE)
  File "/zhome/26/8/209207/02516-intro-to-dl-in-cv/poster-2-segmentation/models/train.py", line 24, in train_model
    outputs = model(images)
  File "/zhome/26/8/209207/venv/project2_venv/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/zhome/26/8/209207/venv/project2_venv/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/zhome/26/8/209207/02516-intro-to-dl-in-cv/poster-2-segmentation/models/models.py", line 131, in forward
    up_4 = self.up_convolution_4(up_3, down_1)
  File "/zhome/26/8/209207/venv/project2_venv/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/zhome/26/8/209207/venv/project2_venv/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/zhome/26/8/209207/02516-intro-to-dl-in-cv/poster-2-segmentation/models/models.py", line 99, in forward
    x = torch.cat([x1, x2], 1)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 384.00 MiB. GPU 0 has a total capacity of 39.50 GiB of which 1.56 MiB is free. Process 3480068 has 2.43 GiB memory in use. Process 3611642 has 25.11 GiB memory in use. Process 3599620 has 1.29 GiB memory in use. Process 4099066 has 5.83 GiB memory in use. Process 513120 has 2.00 GiB memory in use. Including non-PyTorch memory, this process has 2.80 GiB memory in use. Of the allocated memory 1.96 GiB is allocated by PyTorch, and 361.75 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
